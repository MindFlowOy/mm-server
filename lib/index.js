// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  /*
  * ---
  *   Server Main
  *   @name ndex
  *   @api public
  */

  var Hapi, apiHandler, authConfigs, configs, env, pack, plugins, server, serverConfigs, swaggerOptions, utils;

  pack = require('../package');

  Hapi = require('hapi');

  utils = require('./utilities');

  configs = require('./config');

  /*
  *  Environment variable
  * @type {string}
  */


  env = process.env.NODE_ENV || configs.envType.DEVELOPMET;

  /*
  *  Server configurations based on environment variable
  * @type {Object.<string, string|number>}
  */


  serverConfigs = configs.server[env];

  /*
  *  Authentication configurations based on environment variable
  * @type {Object.<string, string|number>}
  */


  authConfigs = configs.authentication[env];

  console.log('configs.authentication ', configs.authentication);

  console.log('authConfigs ', authConfigs);

  plugins = {
    yar: {
      ttl: 2 * 24 * 60 * 60 * 1000,
      cookieOptions: {
        password: 'mindsecretflow',
        isSecure: false
      }
    },
    travelogue: serverConfigs
  };

  server = new Hapi.Server(serverConfigs.hostname, serverConfigs.port, serverConfigs.options);

  server.pack.allow({
    ext: true
  }).require(plugins, function(err) {
    if (err) {
      throw err;
    }
  });

  authConfigs.passport = server.plugins.travelogue.passport;

  server.pack.allow({
    ext: true
  }).require('mf-auth-api', authConfigs, function(err) {
    if (!err && err !== null) {
      return console.log(['error'], 'mf-auth-api\' load error: ' + err);
    } else {
      return console.log(['start'], 'mf-auth-api interface loaded');
    }
  });

  if (env === configs.envType.DEVELOPMET) {
    server.on('internalError', function(event) {
      console.log('INTERNAL ERROR');
      return console.log(event);
    });
  }

  server.addRoute({
    method: 'GET',
    path: '/home',
    config: {
      auth: 'passport',
      handler: function(request) {
        return request.reply('ACCESS GRANTED<br/><br/><a href="/aa/session">Logout</a>');
      }
    }
  });

  apiHandler = function(request) {
    return utils.getMarkDownHTML(__dirname.replace('/lib', '') + '/README.md', function(err, data) {
      return request.reply.view('swagger.html', {
        title: pack.name,
        markdown: data
      });
    });
  };

  server.addRoute({
    method: 'GET',
    path: '/',
    config: {
      handler: apiHandler
    }
  });

  server.addRoute({
    method: 'GET',
    path: '/api/{path*}',
    handler: {
      directory: {
        path: './public',
        listing: false,
        index: true
      }
    }
  });

  server.start(function() {
    return console.log('server started ', server.info.uri);
  });

  swaggerOptions = {
    basePath: configs.server.url(env),
    apiVersion: pack.version
  };

  server.pack.allow({
    ext: true
  }).require('hapi-swagger', swaggerOptions, function(err) {
    if (err) {
      return console.log('[ error ], plugin swagger load error: ', err);
    } else {
      return console.log('[ start ], swagger interface loaded!');
    }
  });

}).call(this);

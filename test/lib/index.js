// Generated by CoffeeScript 1.6.3
(function() {
  var Lab, after, authentication, before, configs, describe, expect, it, routes, server, utils, _;

  Lab = require('lab');

  configs = require('../../lib/config/index');

  server = require('../../lib/server');

  utils = require('../../lib/utilities');

  authentication = require('../../lib/authentication');

  routes = require('../../lib/routes');

  _ = require('lodash');

  expect = Lab.expect;

  before = Lab.before;

  after = Lab.after;

  describe = Lab.experiment;

  it = Lab.test;

  describe('Utils isDevelopment', function() {
    return it('should return false', function(done) {
      expect(utils.isDevelopment()).to.be["false"];
      return done();
    });
  });

  describe('Utils getMarkDownHTML', function() {
    var html;
    html = void 0;
    before(function(done) {
      return utils.getMarkDownHTML('API.md', function(err, data) {
        expect(err).to.not.exist;
        html = data;
        return done();
      });
    });
    return it('should convert API.md to HTML', function(done) {
      console.log('HTML ', html);
      expect(html).to.have.string('<h1 id="mirrormonkey-api">');
      return done();
    });
  });

  describe('Server', function() {
    it('thorws error if missing host configuration ', function(done) {
      var hapiServer, tempServerConfig;
      hapiServer = void 0;
      tempServerConfig = _.omit(configs.server, 'host');
      expect(function() {
        return hapiServer = server(tempServerConfig);
      }).to["throw"]('Server module: Invalid configuration object');
      return done();
    });
    it('thorws error if missing port configuration ', function(done) {
      var hapiServer, tempServerConfig;
      hapiServer = void 0;
      tempServerConfig = _.omit(configs.server, 'port');
      expect(function() {
        return hapiServer = server(tempServerConfig);
      }).to["throw"]('Server module: Invalid configuration object');
      return done();
    });
    it('thorws error if missing plugins configuration ', function(done) {
      var hapiServer, tempServerConfig;
      hapiServer = void 0;
      tempServerConfig = _.omit(configs.server, 'plugins');
      expect(function() {
        return hapiServer = server(tempServerConfig);
      }).to["throw"]('Server module: Invalid configuration object');
      return done();
    });
    return it('returns server if valid configuration ', function(done) {
      var hapiServer;
      hapiServer = server(configs.server);
      expect(hapiServer).to.exist;
      return done();
    });
  });

  describe('/users/', function() {
    return it('returns an error when requested without auth', function(done) {
      var authModuleError, hapiServer;
      hapiServer = server(configs.server);
      authModuleError = authentication(hapiServer, configs.authentication);
      expect(authModuleError).to.equal(void 0);
      hapiServer.addRoutes(routes);
      return hapiServer.inject('/users/', function(res) {
        expect(res.statusCode).to.equal(401);
        expect(res.result.err).to.equal('unauthenticated');
        return done();
      });
    });
  });

  describe('/questions/', function() {
    return it('returns questions object', function(done) {
      var authModuleError, hapiServer;
      hapiServer = server(configs.server);
      authModuleError = authentication(hapiServer, configs.authentication);
      hapiServer.addRoutes(routes);
      return hapiServer.inject('/questions/', function(res) {
        expect(res.statusCode).to.equal(200);
        expect(res.result.questions[0].Q).to.equal('Did you eat food?');
        expect(res.result.questions[1].Q).to.equal('Was it mostly plants?');
        return done();
      });
    });
  });

  describe('/', function() {
    return it('returns API documentation', function(done) {
      var authModuleError, hapiServer;
      hapiServer = server(configs.server);
      authModuleError = authentication(hapiServer, configs.authentication);
      hapiServer.addRoutes(routes);
      return hapiServer.inject('/', function(res) {
        expect(res.statusCode).to.equal(200);
        expect(res.payload).to.have.string('<a href="/">MirrorMonkey-api</a>');
        return done();
      });
    });
  });

}).call(this);

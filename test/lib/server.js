// Generated by CoffeeScript 1.6.3
(function() {
  var Hapi, Lab, after, authentication, before, configs, describe, expect, http, it, routes, server, utils;

  Lab = require('lab');

  Hapi = require('hapi');

  http = require('http');

  configs = require('../../lib/config/index');

  server = require('../../lib/server');

  utils = require('../../lib/utilities');

  authentication = require('../../lib/authentication');

  routes = require('../../lib/routes');

  expect = Lab.expect;

  before = Lab.before;

  after = Lab.after;

  describe = Lab.experiment;

  it = Lab.test;

  describe('Server', function() {
    it('thorws error if missing host configuration ', function(done) {
      var hapiServer, tempServerConfig;
      hapiServer = void 0;
      tempServerConfig = Hapi.utils.removeKeys(configs.server, 'host');
      expect(function() {
        return hapiServer = server(tempServerConfig);
      }).to["throw"]('Server module: Invalid configuration object');
      return done();
    });
    it('thorws error if missing port configuration ', function(done) {
      var hapiServer, tempServerConfig;
      hapiServer = void 0;
      tempServerConfig = Hapi.utils.removeKeys(configs.server, 'port');
      expect(function() {
        return hapiServer = server(tempServerConfig);
      }).to["throw"]('Server module: Invalid configuration object');
      return done();
    });
    it('thorws error if missing plugins configuration ', function(done) {
      var hapiServer, tempServerConfig;
      hapiServer = void 0;
      tempServerConfig = Hapi.utils.removeKeys(configs.server, 'plugins');
      expect(function() {
        return hapiServer = server(tempServerConfig);
      }).to["throw"]('Server module: Invalid configuration object');
      return done();
    });
    return it('returns server if valid configuration ', function(done) {
      var hapiServer;
      hapiServer = server(configs.server);
      expect(hapiServer).to.exist;
      return done();
    });
    /*
    dispatch = (req, res) ->
          reply = 'Hello World';
    
          res.writeHead 200,
            'Content-Type': 'text/plain'
            'Content-Length': reply.length
    
          res.end reply
    
    server = Http.createServer dispatch
    */

  });

}).call(this);

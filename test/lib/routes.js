// Generated by CoffeeScript 1.6.3
(function() {
  var Hapi, Lab, aaBody, aaRequest, after, authentication, before, configs, describe, expect, http, it, questionBody, questionRequest, routes, server, userRequest, utils;

  Lab = require('lab');

  Hapi = require('hapi');

  http = require('http');

  configs = require('../../lib/config/index');

  server = require('../../lib/server');

  utils = require('../../lib/utilities');

  authentication = require('../../lib/authentication');

  routes = require('../../lib/routes');

  expect = Lab.expect;

  before = Lab.before;

  after = Lab.after;

  describe = Lab.experiment;

  it = Lab.test;

  aaBody = {
    username: 'MindFlow',
    password: 'test'
  };

  aaRequest = {
    method: 'POST',
    url: '/aa/session',
    payload: JSON.stringify(aaBody)
  };

  userRequest = {
    method: "GET",
    url: '/users/me',
    headers: {}
  };

  questionBody = {
    question: 'Did you eat food?',
    answer: 'Y'
  };

  questionRequest = {
    method: 'POST',
    url: '/questions/food',
    payload: JSON.stringify(questionBody),
    headers: {}
  };

  describe('/users/me', function() {
    it('GET returns an error when requested without auth', function(done) {
      var hapiServer;
      hapiServer = server(configs.server);
      authentication(hapiServer, configs.authentication);
      hapiServer.addRoutes(routes);
      return hapiServer.inject('/users/me', function(res) {
        expect(res.statusCode).to.equal(401);
        expect(res.result.err).to.equal('unauthenticated');
        return done();
      });
    });
    return it('GET returns user when requested with auth', function(done) {
      var hapiServer;
      hapiServer = server(configs.server);
      authentication(hapiServer, configs.authentication);
      hapiServer.addRoutes(routes);
      return hapiServer.inject(aaRequest, function(res) {
        var cookie, header;
        header = res.headers["set-cookie"];
        expect(header).to.exist;
        cookie = header[0].match(/(session=[^\x00-\x20\"\,\;\\\x7F]*)/)[1];
        userRequest.headers.cookie = cookie;
        expect(res.statusCode).to.equal(200);
        return hapiServer.inject(userRequest, function(res) {
          expect(res.result.username).to.equal("MindFlow");
          return done();
        });
      });
    });
  });

  describe('/questions/food', function() {
    it('GET returns questions object', function(done) {
      var hapiServer;
      hapiServer = server(configs.server);
      authentication(hapiServer, configs.authentication);
      hapiServer.addRoutes(routes);
      return hapiServer.inject('/questions/food', function(res) {
        expect(res.statusCode).to.equal(200);
        expect(res.result.questions[0].Q).to.equal('Did you eat food?');
        expect(res.result.questions[1].Q).to.equal('Was it mostly plants?');
        return done();
      });
    });
    return it('POST saves questions reply', function(done) {
      var hapiServer;
      hapiServer = server(configs.server);
      authentication(hapiServer, configs.authentication);
      hapiServer.addRoutes(routes);
      return hapiServer.inject(aaRequest, function(res) {
        var cookie, header;
        header = res.headers["set-cookie"];
        expect(header).to.exist;
        cookie = header[0].match(/(session=[^\x00-\x20\"\,\;\\\x7F]*)/)[1];
        questionRequest.headers.cookie = cookie;
        expect(res.statusCode).to.equal(200);
        return hapiServer.inject(questionRequest, function(res) {
          expect(res.result.question).to.equal(1);
          return done();
        });
      });
    });
  });

  describe('/ (root)', function() {
    return it('GET returns API documentation', function(done) {
      var hapiServer;
      hapiServer = server(configs.server);
      authentication(hapiServer, configs.authentication);
      hapiServer.addRoutes(routes);
      return hapiServer.inject('/', function(res) {
        expect(res.statusCode).to.equal(200);
        expect(res.payload).to.have.string('<a href="/">MirrorMonkey-api</a>');
        return done();
      });
    });
  });

}).call(this);

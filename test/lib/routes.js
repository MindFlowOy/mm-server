// Generated by CoffeeScript 1.6.3
(function() {
  var Hapi, Lab, after, authentication, before, configs, describe, expect, http, it, routes, server, utils;

  Lab = require('lab');

  Hapi = require('hapi');

  http = require('http');

  configs = require('../../lib/config/index');

  server = require('../../lib/server');

  utils = require('../../lib/utilities');

  authentication = require('../../lib/authentication');

  routes = require('../../lib/routes');

  expect = Lab.expect;

  before = Lab.before;

  after = Lab.after;

  describe = Lab.experiment;

  it = Lab.test;

  describe('/users/', function() {
    it('returns an error when requested without auth', function(done) {
      var authModuleError, hapiServer;
      hapiServer = server(configs.server);
      authModuleError = authentication(hapiServer, configs.authentication);
      expect(authModuleError).to.equal(void 0);
      hapiServer.addRoutes(routes);
      return hapiServer.inject('/users/', function(res) {
        expect(res.statusCode).to.equal(401);
        expect(res.result.err).to.equal('unauthenticated');
        return done();
      });
    });
    return it('returns user when requested with auth', function(done) {
      var authModuleError, body, hapiServer, request;
      body = {
        username: 'MindFlow',
        password: 'test'
      };
      request = {
        method: 'POST',
        url: '/aa/session',
        payload: JSON.stringify(body)
      };
      hapiServer = server(configs.server);
      authModuleError = authentication(hapiServer, configs.authentication);
      expect(authModuleError).to.equal(void 0);
      hapiServer.addRoutes(routes);
      return hapiServer.inject(request, function(res) {
        var cookie, header, request2;
        header = res.headers["set-cookie"];
        expect(header).to.exist;
        cookie = header[0].match(/(session=[^\x00-\x20\"\,\;\\\x7F]*)/);
        expect(res.statusCode).to.equal(200);
        request2 = {
          method: "GET",
          url: '/users/',
          headers: {
            cookie: cookie[1]
          }
        };
        return hapiServer.inject(request2, function(res) {
          expect(res.result.username).to.equal("MindFlow");
          return done();
        });
      });
    });
  });

  describe('/questions/', function() {
    return it('returns questions object', function(done) {
      var authModuleError, hapiServer;
      hapiServer = server(configs.server);
      authModuleError = authentication(hapiServer, configs.authentication);
      hapiServer.addRoutes(routes);
      return hapiServer.inject('/questions/', function(res) {
        expect(res.statusCode).to.equal(200);
        expect(res.result.questions[0].Q).to.equal('Did you eat food?');
        expect(res.result.questions[1].Q).to.equal('Was it mostly plants?');
        return done();
      });
    });
  });

  describe('/', function() {
    return it('returns API documentation', function(done) {
      var authModuleError, hapiServer;
      hapiServer = server(configs.server);
      authModuleError = authentication(hapiServer, configs.authentication);
      hapiServer.addRoutes(routes);
      return hapiServer.inject('/', function(res) {
        expect(res.statusCode).to.equal(200);
        expect(res.payload).to.have.string('<a href="/">MirrorMonkey-api</a>');
        return done();
      });
    });
  });

}).call(this);
